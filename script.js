// Firebase Ï¥àÍ∏∞Ìôî
const firebaseConfig = {
    apiKey: "AIzaSyBZDQCt9JsiTWPIfupuTx-soL4P8queAbE",
    authDomain: "qna1-27186.firebaseapp.com",
    projectId: "qna1-27186",
    storageBucket: "qna1-27186.firebasestorage.app",
    messagingSenderId: "406324964352",
    appId: "1:406324964352:web:893b762650b83e452e3ce5",
    measurementId: "G-WTL0ZKVBXC"
};

// Firebase Ï¥àÍ∏∞Ìôî
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

// ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•Ìï† Î∞∞Ïó¥
let questions = [];

// ÏßàÎ¨∏ Ï†úÏ∂ú Ìï®Ïàò
async function submitQuestion() {
    const subject = document.getElementById('subject').value;
    const title = document.getElementById('title').value;
    const content = document.getElementById('content').value;

    if (!subject || !title || !content) {
        alert('Î™®Îì† ÌïÑÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!');
        return;
    }

    try {
        const questionData = {
            subject: subject,
            title: title,
            content: content,
            answers: [],
            date: new Date().toLocaleDateString(),
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        };

        // ÏΩòÏÜîÏóê Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•ÌïòÏó¨ ÌôïÏù∏
        console.log('Submitting question:', questionData);

        // FirestoreÏóê Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
        const docRef = await db.collection('questions').add(questionData);
        console.log('Document written with ID: ', docRef.id);

        clearForm();
        alert('ÏßàÎ¨∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
        console.error("Error adding question:", error);
        alert('ÏßàÎ¨∏ Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + error.message);
    }
}

// ÎãµÎ≥Ä Ï†úÏ∂ú Ìï®Ïàò
async function submitAnswer(questionId) {
    const answerInput = document.getElementById(`answer-${questionId}`);
    const answerText = answerInput.value;

    if (!answerText) {
        alert('ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!');
        return;
    }

    try {
        const questionRef = db.collection('questions').doc(questionId);
        
        await questionRef.update({
            answers: firebase.firestore.FieldValue.arrayUnion({
                content: answerText,
                date: new Date().toLocaleDateString(),
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            })
        });

        answerInput.value = '';
        alert('ÎãµÎ≥ÄÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
    } catch (error) {
        console.error("Error adding answer:", error);
        alert('ÎãµÎ≥Ä Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + error.message);
    }
}

// ÏßàÎ¨∏ Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
function updateQuestionsList() {
    const questionsList = document.getElementById('questionsList');
    questionsList.innerHTML = '';

    questions.forEach(question => {
        const questionCard = document.createElement('div');
        questionCard.className = 'question-card';
        questionCard.innerHTML = `
            <div class="question-header">
                <span class="subject-tag">${getSubjectEmoji(question.subject)} ${question.subject}</span>
                <span>${question.date}</span>
            </div>
            <h3>${question.title}</h3>
            <p>${question.content}</p>
            <div class="answers">
                <h4>üí¨ ÎãµÎ≥Ä (${question.answers ? question.answers.length : 0}Í∞ú)</h4>
                ${question.answers ? question.answers.map(answer => `
                    <div class="answer">
                        <p>${answer.content}</p>
                        <small>üìÖ ${answer.date}</small>
                    </div>
                `).join('') : ''}
                <div class="answer-form">
                    <input type="text" id="answer-${question.id}" 
                           class="answer-input" 
                           placeholder="ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî">
                    <button onclick="submitAnswer('${question.id}')" 
                            class="submit-btn">ÎãµÎ≥Ä Îì±Î°ù</button>
                </div>
            </div>
        `;
        questionsList.appendChild(questionCard);
    });
}

// ÍµêÍ≥ºÎ™© Ïù¥Î™®ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
function getSubjectEmoji(subject) {
    const emojis = {
        'ÏàòÌïô': 'üìê',
        'ÏòÅÏñ¥': 'üî§',
        'Í≥ºÌïô': 'üî¨',
        'Íµ≠Ïñ¥': 'üìñ'
    };
    return emojis[subject] || 'üìö';
}

// Ìèº Ï¥àÍ∏∞Ìôî Ìï®Ïàò
function clearForm() {
    document.getElementById('subject').value = '';
    document.getElementById('title').value = '';
    document.getElementById('content').value = '';
}

// Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ§Ï†ï
function setupRealtimeUpdates() {
    db.collection('questions')
        .orderBy('timestamp', 'desc')
        .onSnapshot((snapshot) => {
            questions = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            updateQuestionsList();
        }, (error) => {
            console.error("Realtime update error:", error);
        });
}

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ïã§Ìñâ
document.addEventListener('DOMContentLoaded', () => {
    setupRealtimeUpdates();
});
